apiVersion: v1
kind: ConfigMap
metadata:
  name: amq-interconnect-mesh
data:
  qdrouterd.conf: |-
    router {
        mode: interior
        id: InteriorRouter.${HOSTNAME}
        workerThreads:4
        defaultDistribution: unavailable
        allowResumableLinkRoute:false
        timestampsInUTC:true
        saslConfigDir: /etc/sasl2/
    }
    # only allow anonymous connections over localhost
    listener {
        host: localhost
        port: amqp
        authenticatePeer: no
        saslMechanisms: ANONYMOUS
        policyVhost: public
    }
    listener {
        host: 0.0.0.0
        port: amqp
        authenticatePeer: yes
    }
    listener {
        host: 0.0.0.0
        port: amqps
        # sslProfile: service_tls
        sslProfile: client_tls
        requireSsl: true
        authenticatePeer: yes
        saslMechanisms: EXTERNAL PLAIN
        idleTimeoutSeconds: 0
        messageLoggingComponents: all
    }
    listener {
        host: 0.0.0.0
        port: 55672
        role: inter-router
        sslProfile: inter_router_tls
        authenticatePeer: yes
        requireSsl: true
        saslMechanisms: EXTERNAL
    }
    listener {
        host: 0.0.0.0
        port: 55673
        # authenticatePeer: no
        sslProfile: inter_router_tls
        authenticatePeer: yes
        requireSsl: true
        saslMechanisms: EXTERNAL PLAIN
        role: edge
        policyVhost: edge
    }
    listener {
        host: 0.0.0.0
        port: 55677
        sslProfile: inter_router_tls
        authenticatePeer: yes
        requireSsl: true
        saslMechanisms: EXTERNAL PLAIN
        role: inter-router
        policyVhost: inter-router
    }
    listener {
        host: 0.0.0.0
        port: 8080
        authenticatePeer: yes
        saslMechanisms: PLAIN SCRAM-SHA-1
        # authenticatePeer: no
        # saslMechanisms: ANONYMOUS
        sslProfile: console_tls
        http: true
        httpRootDir: /usr/share/qpid-dispatch/console
    }
    connector {
        name: zone-a-mesh-amq-broker

        # port: amqps
        # saslMechanisms: EXTERNAL
        # sslProfile: broker_tls

        host: mesh-broker-amqp-0-svc.broker-mesh-zone-a.svc.cluster.local
        port: 5672
        saslMechanisms: PLAIN
        saslUsername: admin
        saslPassword: admin

        role: route-container
        verifyHostname: false
    }
    connector {
        name: remote-amq-mesh-amqps-route
        host: amq-mesh-amqps-broker-with-interconnect-mesh.apps.y3tpfd3p.westeurope.aroapp.io
        port: 443
        saslMechanisms: EXTERNAL PLAIN

        sslProfile: client_tls
        saslUsername: remote_connection@amq-interconnect-mesh
        saslPassword: passw0rd

        role: route-container
        verifyHostname: false
        idleTimeoutSeconds: 0
        messageLoggingComponents: all
    }

    connector {
        name: remote-amq-mesh-inter-router-route
        host: amq-mesh-inter-router-broker-with-interconnect-mesh.apps.y3tpfd3p.westeurope.aroapp.io
        port: 443
        saslMechanisms: EXTERNAL PLAIN

        sslProfile: inter_router_tls
        saslUsername: remote_connection@amq-interconnect-mesh
        saslPassword: passw0rd

        role: inter-router
        verifyHostname: false
        idleTimeoutSeconds: 0
        messageLoggingComponents: all
    }

    sslProfile {
        name: inter_router_tls
        certFile: /etc/qpid-dispatch-certs/inter-router/tls.crt
        privateKeyFile: /etc/qpid-dispatch-certs/inter-router/tls.key
        caCertFile: /etc/qpid-dispatch-certs/inter-router/ca.crt
    }
    sslProfile {
        name: service_tls
        certFile: /etc/qpid-dispatch-certs/normal/tls.crt
        privateKeyFile: /etc/qpid-dispatch-certs/normal/tls.key
    }
    sslProfile {
        name: console_tls
        certFile: /etc/qpid-dispatch-certs/normal/tls.crt
        privateKeyFile: /etc/qpid-dispatch-certs/normal/tls.key
    }

    sslProfile {
        name: client_tls
        certFile: /etc/qpid-dispatch-certs/client/tls.crt
        privateKeyFile: /etc/qpid-dispatch-certs/client/tls.key
        caCertFile: /etc/qpid-dispatch-certs/client/ca.crt
        passwordFile: /etc/qpid-dispatch-certs/client/password.txt
        #protocols: TLSv1 TLSv1.1 TLSv1.2
    }
    address {
        prefix: closest
        distribution: closest
    }
    address {
        prefix: multicast
        distribution: multicast
    }
    address {
        prefix: unicast
        distribution: closest
    }
    address {
        prefix: exclusive
        distribution: closest
    }
    address {
        prefix: broadcast
        distribution: multicast
    }

    address {
        prefix: rh.usecase.1.queue
        waypoint: yes
        distribution: closest

    }
    autoLink {
      	address: rh.usecase.1.queue
      	connection: zone-a-mesh-amq-broker
      	direction: out
    }
    autoLink {
      	address: rh.usecase.1.queue
      	connection: zone-a-mesh-amq-broker
      	direction: in
    }

    address {
        prefix: rh.usecase.2.queue
        waypoint: yes
        # I want to distribute messages to both local mesh-broker & remote mesh
        distribution: multicast
    }
    # broker autolinks, both dir (in, out)
    autoLink {
        address: rh.usecase.2.queue
        connection: zone-a-mesh-amq-broker
        direction: out
    }
    autoLink {
        address: rh.usecase.2.queue
        connection: zone-a-mesh-amq-broker
        direction: in
    }

    address {
        prefix: telemetry.cortex.train.window
        distribution: closest
    }
    address {
        prefix: telemetry.cortex.train.window.applicatienaam1
        distribution: closest
    }
    linkRoute {
        name: telemetry.cortex.train.window.applicatienaam1.zone-a.in
        pattern: telemetry.cortex.train.window.applicatienaam1.zone-a
        direction: in
        connection: zone-a-mesh-amq-broker
    }
    linkRoute {
        name: telemetry.cortex.train.window.applicatienaam1.zone-a.out
        pattern: telemetry.cortex.train.window.applicatienaam1.zone-a
        direction: out
        connection: zone-a-mesh-amq-broker
    }
    policy {
        enableVhostPolicy: true
        enableVhostNamePatterns: true
        policyDir: /etc/qpid-dispatch-policies
        defaultVhost: $default
    }
    log {
        module: DEFAULT
        enable: debug
        includeTimestamp: true
    }
